services:
  # ---------- platform ----------   
  db:
    container_name: gadget-postgres
    image: postgres:12.10-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - TZ=utc
    volumes:
      - postgres-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  database-api:
    container_name: gadget-database-api
    image: ${DOCKER_REPO}/${DOCKER_PLATFORM}/gadget/database_api:${PACKAGE_VER}
    restart: unless-stopped
    environment:
      - TZ=utc
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8080"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      db: 
        condition: service_healthy
        
  api-gateway:
    container_name: gadget-api-gateway
    image: ${DOCKER_REPO}/${DOCKER_PLATFORM}/gadget/nginx:${PACKAGE_VER}
    restart: unless-stopped
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD-SHELL", "wget -O /dev/null http://127.0.0.1:8080 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      database-api: 
        condition: service_healthy

  app-backend:
    container_name: gadget-app-backend
    image: ${DOCKER_REPO}/${DOCKER_PLATFORM}/gadget/app_backend:${PACKAGE_VER}
    restart: unless-stopped
    volumes:
      - inline-storage:/app/data
      - static-volume:/app/static
      - user-volume:/app/db/
    environment:
      - VERBOSE=False
    depends_on:
      api-gateway:
        condition: service_healthy

  app-frontend:
    container_name: gadget-app-frontend
    image: dev-registry.factorysmart.com/linux/amd64/gadget/app_frontend:0.0.0.dev1156055067065066060
    restart: unless-stopped
    environment:
      - GADGET_APP_TITLE=${GADGET_APP_TITLE}
    ports:
      - 80:80
    volumes:
      - static-volume:/usr/share/nginx/html/static
      - ../gadgetapp-custom/config.json:/usr/share/nginx/html/config.json

  data-broker:
    container_name: gadget-data-broker
    image: ${DOCKER_REPO}/${DOCKER_PLATFORM}/gadget/zmq_broker:${PACKAGE_VER}
    restart: unless-stopped
    ports:
      - 5000:5000
      - 5001:5001
    environment:
      - ZMQ_BROKER_SETTINGS_HOST=0.0.0.0
      - ZMQ_BROKER_SETTINGS_OUT_PORT=5001
      - ZMQ_BROKER_SETTINGS_IN_PORT=5000
      - TZ=utc
    depends_on:
      api-gateway: 
        condition: service_healthy
  
  data-manager:
    container_name: gadget-data-manager
    image: ${DOCKER_REPO}/${DOCKER_PLATFORM}/gadget/data_manager:${PACKAGE_VER}
    restart: unless-stopped
    environment:
      - DATA_MANAGER_INLINE_CAPACITY_THRESHOLD=0.5 GB
      - DATA_MANAGER_OFFLINE_CAPACITY_THRESHOLD=50 GB
      - TZ=utc
    volumes:
      - data-manager-storage:/app/data/internal
      - inline-storage:/app/data/inline
      - offline-storage:/app/data/offline
    depends_on:
      api-gateway: 
        condition: service_healthy
  
  system-monitor:
    container_name: gadget-system-monitor
    image: ${DOCKER_REPO}/${DOCKER_PLATFORM}/gadget/system_monitor:${PACKAGE_VER}
    restart: unless-stopped
    network_mode: host
    environment:
      - SYSTEM_MONITOR_SETTINGS_DATABASE_API_HOST=0.0.0.0
      - SYSTEM_MONITOR_SETTINGS_DATABASE_API_PORT=8080
      - TZ=utc
    volumes:
      - inline-storage:/app/data/inline
      - offline-storage:/app/data/offline
    depends_on:
      api-gateway: 
        condition: service_healthy

  model-manager:
    container_name: gadget-model-manager
    image: ${DOCKER_REPO}/${DOCKER_PLATFORM}/gadget/model_manager:${PACKAGE_VER}
    restart: unless-stopped
    ports:
      - 8000:8000
    environment:
      - DATA_STORAGE_ROOT=/app/data/models
      - CONVERT_TO=engine
      - CONVERSION_SERVICE_NAME=pipeline
      - TZ=utc
    volumes:
      - model-storage:/app/models
    depends_on:
      api-gateway: 
        condition: service_healthy

  # ---------- inspection ----------   
  pipeline:
    container_name: gadget-pipeline
    command: gadget_pipeline_server
    runtime: nvidia
    build: 
      context: ../pipeline
      args:
        PACKAGE_VER: ${PACKAGE_VER}
        PYPI_SERVER: ${PYPI_SERVER}
      dockerfile: pipeline.dockerfile
    image: everything_pipeline:${PACKAGE_VER}
    restart: unless-stopped
    environment:
      - PIPELINE_SERVER_SERVICE_TYPE=pipeline
      - PIPELINE_SERVER_SERVICE_NAME=pipeline
      - PIPELINE_SERVER_SETTINGS_GADGET_DATA_BROKER_SUB_TOPICS=sensor/profiler
      - PIPELINE_SERVER_SETTINGS_MODELS_ROOT=/home/gadget/pipeline/trt-engines
      - PIPELINE_SERVER_SETTINGS_PIPELINE_PATH=/home/gadget/pipeline
      - PIPELINE_SERVER_SETTINGS_PIPELINE_CLASS=pipeline_class.ModelPipeline
      - PIPELINE_SERVER_SETTINGS_PIPELINE_DEFINITION_JSON=pipeline_def.json
      - PIPELINE_SERVER_PARAMS_PASS_THROUGH_ENABLED=false
      - PIPELINE_SERVER_PARAMS_ARCHIVE_PERIOD=1
      - TZ=utc
    volumes:
      - ../pipeline/:/home/gadget/pipeline
      - model-storage:/app/models 
      - inline-storage:/app/data
    depends_on:
      api-gateway: 
        condition: service_healthy

  automation:
    container_name: gadget-automation
    command: gadget_automation_server
    network_mode: "host"
    build:
      context: ../automation
      dockerfile: automation.dockerfile
      args:
        DOCKER_PLATFORM: ${DOCKER_PLATFORM}
        PACKAGE_VER: ${PACKAGE_VER}
        PYPI_SERVER: ${PYPI_SERVER}
    image: everything_automation:${PACKAGE_VER}
    restart: unless-stopped
    environment:
      - AUTOMATION_SERVER_SERVICE_TYPE=gadget-automation
      - AUTOMATION_SERVER_SERVICE_NAME=automation
      - AUTOMATION_SERVER_SETTINGS_GADGET_DATABASE_API_HOST=127.0.0.1
      - AUTOMATION_SERVER_SETTINGS_GADGET_DATA_BROKER_HOST=127.0.0.1
      - AUTOMATION_SERVER_SETTINGS_GADGET_DATA_BROKER_SUB_TOPICS=pipeline/pipeline
      - AUTOMATION_SERVER_SETTINGS_AUTOMATION_PATH=/home/gadget/automation/
      - AUTOMATION_SERVER_SETTINGS_AUTOMATION_CLASS=automation_class.AutomationClass
      - AUTOMATION_SERVER_SETTINGS_AUTOMATION_DEFINITION_JSON=automation_class_def.json
      - TZ=utc
    volumes:
      - ../automation:/home/gadget/automation
    depends_on:
      api-gateway: 
        condition: service_healthy

  gocator:
    hostname: gadget-sensor-gocator
    container_name: gadget-sensor-gocator
    network_mode: host 
    image: ${DOCKER_REPO}/${DOCKER_PLATFORM}/gadget/sensor_gocator:${PACKAGE_VER}
    restart: unless-stopped
    environment:
      - SENSOR_GOCATOR_SERVICE_NAME=profiler
      - SENSOR_GOCATOR_PARAMS_START=true
      - SENSOR_GOCATOR_PARAMS_EMULATION_ENABLED=true
      - SENSOR_GOCATOR_PARAMS_CAM_IP=192.168.1.10
      - TZ=utc
    volumes:
      - ../test_images:/home/gadget/test_images
      - inline-storage:/app/data/inline
    depends_on:
      api-gateway: 
        condition: service_healthy

  # ---------- gofactory ----------   
  vault-client:
    container_name: gadget-vault-client
    image: ${DOCKER_REPO}/${DOCKER_PLATFORM}/utils/vault_client:${PACKAGE_VER}
    restart: unless-stopped
    environment:
      - PROJECT_ID=${CLOUD_PROJECT_ID}
      - CLIENT_ID=${GADGET_DEVICE_ID}
      - INITIAL_CREDENTIAL=${VAULT_CREDENTIAL}
    volumes:
      - vault-storage:/app/data

  mqtt-bridge:
    container_name: gadget-mqtt-bridge
    image: ${DOCKER_REPO}/${DOCKER_PLATFORM}/gadget/mqtt_bridge:${PACKAGE_VER}
    restart: unless-stopped
    environment:
      - MQTT_BRIDGE_SETTINGS_CLOUD_PROJECT_ID=${CLOUD_PROJECT_ID}
      - MQTT_BRIDGE_SETTINGS_CLIENT_ID=${FACTORY_CLIENT_ID}
      - MQTT_BRIDGE_SETTINGS_BROKER_HOSTNAME=${FACTORY_HOST}
    volumes:
      - inline-storage:/app/data/inline
      - offline-storage:/app/data/offline
      - transfer-storage:/app/data/transfer
    depends_on: 
      api-gateway:
        condition: service_healthy

  s3-integrator:
    container_name: gadget-s3-integrator
    image: ${DOCKER_REPO}/${DOCKER_PLATFORM}/utils/s3_integrator:${PACKAGE_VER}
    restart: unless-stopped
    environment:
      - CLOUD_PROJECT_ID=${CLOUD_PROJECT_ID}
    volumes:
      - transfer-storage:/app/data/transfer
      - model-storage:/app/data/models

  log-collector:
    container_name: gadget-log-collector
    image: ${DOCKER_REPO}/${DOCKER_PLATFORM}/utils/log_collector:${PACKAGE_VER}
    restart: unless-stopped
    volumes:
      - transfer-storage:/app/data/transfer
      - /var/log/journal:/var/log/hostjournal:ro
  
volumes:
  data-manager-storage:
  offline-storage:     
  inline-storage:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/gadget-inline
  model-storage:
  transfer-storage:
  postgres-db:
  static-volume:
  vault-storage:
  user-volume:
